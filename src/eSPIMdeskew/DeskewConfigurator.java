package eSPIMdeskew;

import org.micromanager.PropertyMap;
import org.micromanager.PropertyMaps;
import org.micromanager.Studio;
import org.micromanager.data.ProcessorConfigurator;
/**
 *
 * @author Yina
 */
public class DeskewConfigurator extends javax.swing.JFrame implements ProcessorConfigurator{
    
    private Studio studio_;
    /**
     * Creates new form NewJFrame
     */
    public DeskewConfigurator() {
        initComponents();
    }
     public DeskewConfigurator(Studio studio, PropertyMap settings) {
        initComponents();
        studio_=studio;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField_zstep = new javax.swing.JTextField();
        jLabel_zstep = new javax.swing.JLabel();
        jLabel_zstepunit = new javax.swing.JLabel();
        jLabel_Pixelsize = new javax.swing.JLabel();
        jTextField_Pixelsize = new javax.swing.JTextField();
        jLabel_Pixelsizeunit = new javax.swing.JLabel();
        jLabel_Angle = new javax.swing.JLabel();
        jTextField_Angle = new javax.swing.JTextField();
        jLabel_angleunit = new javax.swing.JLabel();
        jLabel_timepoint = new javax.swing.JLabel();
        jTextField_interval = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField_zstep.setText("0.8");
        jTextField_zstep.setToolTipText("");
        jTextField_zstep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTextField_zstepMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jTextField_zstepMouseExited(evt);
            }
        });

        jLabel_zstep.setText("z_step");

        jLabel_zstepunit.setText("(um)");

        jLabel_Pixelsize.setText("Pixelsize");

        jTextField_Pixelsize.setText("100");

        jLabel_Pixelsizeunit.setText("(nm)");

        jLabel_Angle.setText("Lightsheet angle");

        jTextField_Angle.setText("30");

        jLabel_angleunit.setText("(degree)");

        jLabel_timepoint.setText("Volume interval to deskew:");

        jTextField_interval.setText("10");
        jTextField_interval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_intervalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(20, 20, 20)
                                    .addComponent(jLabel_zstep, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField_zstep, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(26, 26, 26)
                                    .addComponent(jTextField_Angle, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel_Pixelsize)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField_Pixelsize)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_zstepunit)
                            .addComponent(jLabel_Pixelsizeunit)
                            .addComponent(jLabel_angleunit)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_Angle, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel_timepoint)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField_interval, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_zstep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_zstep, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_zstepunit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Pixelsize)
                    .addComponent(jTextField_Pixelsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Pixelsizeunit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel_Angle, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Angle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_angleunit))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_interval, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_timepoint))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField_zstepMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField_zstepMouseEntered
        // TODO add your handling code here:
        if(studio_.acquisitions().isAcquisitionRunning()){
            jTextField_zstep.disable();
        }
    }//GEN-LAST:event_jTextField_zstepMouseEntered

    private void jTextField_zstepMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField_zstepMouseExited
        // TODO add your handling code here:
        jTextField_zstep.enable();
    }//GEN-LAST:event_jTextField_zstepMouseExited

    private void jTextField_intervalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_intervalActionPerformed
        // TODO add your handling code here:
        studio_.data().notifyPipelineChanged();
    }//GEN-LAST:event_jTextField_intervalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeskewConfigurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeskewConfigurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeskewConfigurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeskewConfigurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeskewConfigurator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel_Angle;
    private javax.swing.JLabel jLabel_Pixelsize;
    private javax.swing.JLabel jLabel_Pixelsizeunit;
    private javax.swing.JLabel jLabel_angleunit;
    private javax.swing.JLabel jLabel_timepoint;
    private javax.swing.JLabel jLabel_zstep;
    private javax.swing.JLabel jLabel_zstepunit;
    private javax.swing.JTextField jTextField_Angle;
    private javax.swing.JTextField jTextField_Pixelsize;
    private javax.swing.JTextField jTextField_interval;
    private javax.swing.JTextField jTextField_zstep;
    // End of variables declaration//GEN-END:variables

    public double getZstep() {
      return (double) Double.parseDouble(jTextField_zstep.getText());
    }
    
    public double getAngle() {
      return (double) Double.parseDouble(jTextField_Angle.getText());
    }
    
    public int getPixelsize() {
      return (int) Integer.parseInt(jTextField_Pixelsize.getText());
    }
    
    public int getVolumeinterval() {
      return (int) Integer.parseInt(jTextField_interval.getText());
    }
    
    @Override
    public void showGUI() {
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("eSPIM deskew");
        
        setVisible(true);
    }

    @Override
    public void cleanup() {   
    }

    @Override
    public PropertyMap getSettings() { 
        /*PropertyMap.Builder builder = PropertyMaps.builder(); 
        builder.putDouble("zstep", getZstep());
        builder.putDouble("angle", getAngle());
        builder.putInt("pixelsize", getPixelsize());
        builder.putInt("interval",getVolumeinterval());
        return builder.build();*/
        
        PropertyMap.PropertyMapBuilder builder = studio_.data().getPropertyMapBuilder();
        return builder.build();
    }
}
